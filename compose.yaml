# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Docker Compose конфигурация для Web3 проекта
# Включает Hardhat backend и Next.js frontend

services:
  # Hardhat блокчейн нода
  hardhat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hardhat-node
    environment:
      - NODE_ENV=production
    ports:
      - "8545:8545"
    networks:
      - web3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "npx", "hardhat", "node", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js фронтенд
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: nextjs-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_HARDHAT_URL=http://hardhat:8545
    ports:
      - "3000:3000"
    depends_on:
      hardhat:
        condition: service_healthy
    networks:
      - web3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  web3-network:
    driver: bridge
    name: web3-network

# Volumes для постоянного хранения данных (опционально)
volumes:
  hardhat-data:
    name: hardhat-blockchain-data
  node-modules-cache:
    name: node-modules-cache

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

