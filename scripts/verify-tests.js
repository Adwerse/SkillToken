const fs = require('fs');
const path = require('path');

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤ –∏ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤
const testFiles = [
  'test/SkillToken.test.ts'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–æ–≤:');
testFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
  } else {
    console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º coverage –æ—Ç—á–µ—Ç—ã
const coverageFiles = [
  'coverage/index.html',
  'coverage/coverage-final.json',
  'coverage/lcov.info'
];

console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ coverage:');
coverageFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
  } else {
    console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º coverage –¥–∞–Ω–Ω—ã–µ
if (fs.existsSync('coverage/coverage-final.json')) {
  console.log('\nüìà –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è SkillToken.sol:');
  try {
    const coverageData = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
    
    // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ SkillToken
    let skillTokenData = null;
    for (const [filepath, data] of Object.entries(coverageData)) {
      if (filepath.includes('SkillToken.sol')) {
        skillTokenData = data;
        break;
      }
    }
    
    if (skillTokenData) {
      const statements = skillTokenData.s ? Object.keys(skillTokenData.s).length : 0;
      const functions = skillTokenData.f ? Object.keys(skillTokenData.f).length : 0;
      const branches = skillTokenData.b ? Object.keys(skillTokenData.b).length : 0;
      const lines = skillTokenData.l ? Object.keys(skillTokenData.l).length : 0;
      
      console.log(`   üìù Statements: ${statements} –ø–æ–∫—Ä—ã—Ç—ã`);
      console.log(`   üîß Functions: ${functions} –ø–æ–∫—Ä—ã—Ç—ã`);
      console.log(`   üå≥ Branches: ${branches} –ø–æ–∫—Ä—ã—Ç—ã`);
      console.log(`   üìè Lines: ${lines} –ø–æ–∫—Ä—ã—Ç—ã`);
    }
  } catch (e) {
    console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ coverage');
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const configFiles = [
  'hardhat.config.ts',
  'package.json',
  '.solcover.js',
  'tsconfig.json'
];

console.log('\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:');
configFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${file} - –Ω–∞–π–¥–µ–Ω`);
  } else {
    console.log(`‚ùå ${file} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –≤ package.json
if (fs.existsSync('package.json')) {
  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ npm —Å–∫—Ä–∏–ø—Ç–æ–≤:');
  try {
    const packageData = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    const scripts = packageData.scripts || {};
    
    const requiredScripts = ['test', 'test-only', 'coverage', 'compile'];
    requiredScripts.forEach(script => {
      if (scripts[script]) {
        console.log(`‚úÖ npm run ${script} - –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      } else {
        console.log(`‚ùå npm run ${script} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
  } catch (e) {
    console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å package.json');
  }
}

console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
console.log('\nüìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
console.log('   npm test          - —Ç–µ—Å—Ç—ã + coverage');
console.log('   npm run test-only - —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã');
console.log('   npm run coverage  - —Ç–æ–ª—å–∫–æ coverage');
console.log('\nüìñ –û—Ç–∫—Ä–æ–π—Ç–µ coverage/index.html –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞'); 